"use strict";(()=>{var e={};e.id=344,e.ids=[344],e.modules={20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},20661:e=>{e.exports=require("sqlite3")},56249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,s){return s in t?t[s]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,s)):"function"==typeof t&&"default"===s?t:void 0}}})},5025:(e,t,s)=>{s.r(t),s.d(t,{config:()=>c,default:()=>E,routeModule:()=>d});var a={};s.r(a),s.d(a,{default:()=>i});var n=s(71802),r=s(47153),o=s(56249),u=s(20661),l=s.n(u);async function i(e,t){if("GET"!==e.method)return t.status(405).json({message:"Method Not Allowed"});let s=e.query.version?e.query.version:"4",a=new(l()).Database("repositories"+s+".db");try{let{timePeriod:s}=e.query,n="",r=new Date().getTime();switch(s){case"all":default:n="";break;case"last_six_months":n=`WHERE date >= ${r-157788e5}`;break;case"last_three_months":n=`WHERE date >= ${r-78894e5}`;break;case"last_month":n=`WHERE date >= ${r-2629746e3}`;break;case"last_year":n=`WHERE date >= ${r-31556952e3}`}let o=new Date,u="";switch(s){case"all":default:u="";break;case"last_six_months":u=`WHERE created_at >= ${o-157788e5}`;break;case"last_three_months":u=`WHERE created_at >= ${r-78894e5}`;break;case"last_month":u=`WHERE created_at >= ${o-2629746e3}`;break;case"last_year":u=`WHERE created_at >= ${r-31556952e3}`}let l=e=>new Promise((t,s)=>{a.get(e,(e,a)=>{e?s(e):t(a)})}),i=`SELECT COUNT(*) AS contribution_count FROM contributions ${n}`,E=await l(i),c=`SELECT COUNT(Distinct(contributor)) AS contributors_count FROM contributions ${n}`,d=await l(c),p=`SELECT COUNT(*) AS repo_count FROM repositories ${u}`,_=await l(p);console.log(_);let S=`SELECT 
      SUM(CASE WHEN type = 'open' THEN 1 ELSE 0 END) AS open_pulls,
      SUM(CASE WHEN type = 'merge' THEN 1 ELSE 0 END) AS merged_pulls,
      SUM(CASE WHEN type = 'close' THEN 1 ELSE 0 END) AS closed_pulls
      FROM pulls ${n}`,m=await l(S),A=`SELECT 
      SUM(CASE WHEN type = 'open' THEN 1 ELSE 0 END) AS open_issues,
      SUM(CASE WHEN type = 'close' THEN 1 ELSE 0 END) AS closed_issues,
      SUM(CASE WHEN type = 'update' THEN 1 ELSE 0 END) AS updated_issues
      FROM issues ${n}`,b=await l(A),P={contributions:{name:"Contributions",value:E.contribution_count},pullRequests:[{name:"Pull Requests",value:m.open_pulls+m.merged_pulls+m.closed_pulls},{name:"Merged PRs",value:m.merged_pulls},{name:"Closed PRs",value:m.closed_pulls}],issues:[{name:"Opened Issues",value:b.open_issues},{name:"Closed Issues",value:b.closed_issues},{name:"Updated Issues",value:b.updated_issues}],contributors:{name:"Contributors",value:d.contributors_count},repos:{name:"Repos",value:_.repo_count}};t.status(200).json(P)}catch(e){console.error("Error fetching metrics:",e),t.status(500).json({message:"Internal Server Error"})}finally{a.close()}}let E=(0,o.l)(a,"default"),c=(0,o.l)(a,"config"),d=new n.PagesAPIRouteModule({definition:{kind:r.x.PAGES_API,page:"/api/getStatsByDate",pathname:"/api/getStatsByDate",bundlePath:"",filename:""},userland:a})},47153:(e,t)=>{var s;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return s}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(s||(s={}))},71802:(e,t,s)=>{e.exports=s(20145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var s=t(t.s=5025);module.exports=s})();